from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import requests
import os
import logging
from typing import List, Dict

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(title="ü§ñ AI Assistant Pro")

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Hugging Face
HF_TOKEN = os.getenv("HF_TOKEN")
HF_API_URL = "https://api-inference.huggingface.co/models/microsoft/DialoGPT-medium"

class ChatRequest(BaseModel):
    message: str
    history: List[Dict] = []
    user_id: str = "guest"

class ChatResponse(BaseModel):
    response: str
    history: List[Dict]

async def get_ai_response(message: str, history: List[Dict]) -> str:
    """–ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Hugging Face API"""
    if not HF_TOKEN:
        return "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI –ø–æ–º–æ—â–Ω–∏–∫. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≤–µ—Ä—à–∞—é—Ç—Å—è..."
    
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        context = ""
        for msg in history[-4:]:  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–æ–æ–±—â–µ–Ω–∏—è
            speaker = "–í—ã" if msg["role"] == "user" else "–Ø"
            context += f"{speaker}: {msg['content']}\n"
        
        prompt = f"{context}–í—ã: {message}\n–Ø:"
        
        headers = {"Authorization": f"Bearer {HF_TOKEN}"}
        payload = {
            "inputs": prompt,
            "parameters": {
                "max_new_tokens": 128,
                "temperature": 0.8,
                "do_sample": True,
                "return_full_text": False
            }
        }
        
        response = requests.post(HF_API_URL, headers=headers, json=payload, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            if result and isinstance(result, list) and 'generated_text' in result[0]:
                return result[0]['generated_text'].strip()
        
        # Fallback –æ—Ç–≤–µ—Ç—ã
        fallback_responses = [
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ?",
            "–ü–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?",
            "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            "–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ –æ–±—â–µ–Ω–∏—é. –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?"
        ]
        import random
        return random.choice(fallback_responses)
        
    except Exception as e:
        logger.error(f"AI API error: {e}")
        return "ü§ñ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à AI –ø–æ–º–æ—â–Ω–∏–∫. –ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã!"

@app.post("/chat")
async def chat_endpoint(request: ChatRequest):
    try:
        ai_response = await get_ai_response(request.message, request.history)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        new_history = request.history + [
            {"role": "user", "content": request.message},
            {"role": "assistant", "content": ai_response}
        ]
        
        return ChatResponse(
            response=ai_response,
            history=new_history[-6:]  # –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–æ–æ–±—â–µ–Ω–∏–π
        )
        
    except Exception as e:
        logger.error(f"Chat endpoint error: {e}")
        return ChatResponse(
            response="–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã!",
            history=request.history
        )

@app.get("/")
async def root():
    return {"status": "active", "ai": "Hugging Face", "version": "2.0"}

@app.get("/health")
async def health():
    return {"status": "healthy", "service": "AI Assistant Pro"}
