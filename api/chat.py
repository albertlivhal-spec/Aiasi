from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import requests
import os
import logging
from typing import List, Dict

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(title="ü§ñ AI Assistant Pro")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Hugging Face
HF_TOKEN = os.getenv("HF_TOKEN")

# DeepSeek-R1 - –æ—Ç–ª–∏—á–Ω–∞—è –¥–∏–∞–ª–æ–≥–æ–≤–∞—è –º–æ–¥–µ–ª—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä—É—Å—Å–∫–æ–≥–æ
HF_API_URL = "https://api-inference.huggingface.co/models/deepseek-ai/deepseek-llm-7b-chat"

class ChatRequest(BaseModel):
    message: str
    history: List[Dict] = []

class ChatResponse(BaseModel):
    response: str
    history: List[Dict]

async def get_ai_response(message: str, history: List[Dict]) -> str:
    """–ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek-R1 —á–µ—Ä–µ–∑ Hugging Face API"""
    if not HF_TOKEN:
        return "üîß AI —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤–æ–π –º–æ–¥–µ–ª–∏
        prompt = "<s>"
        for msg in history[-4:]:
            if msg["role"] == "user":
                prompt += f"[INST] {msg['content']} [/INST]"
            else:
                prompt += f" {msg['content']}</s><s>"
        
        prompt += f"[INST] {message} [/INST]"
        
        headers = {"Authorization": f"Bearer {HF_TOKEN}"}
        payload = {
            "inputs": prompt,
            "parameters": {
                "max_new_tokens": 150,
                "temperature": 0.7,
                "do_sample": True,
                "top_p": 0.9,
                "repetition_penalty": 1.1,
                "return_full_text": False
            }
        }
        
        response = requests.post(HF_API_URL, headers=headers, json=payload, timeout=45)
        
        if response.status_code == 200:
            result = response.json()
            if isinstance(result, list) and len(result) > 0:
                ai_text = result[0].get('generated_text', '').strip()
                # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Ç–µ–≥–æ–≤ –ø—Ä–æ–º–ø—Ç–∞
                ai_text = ai_text.replace('[INST]', '').replace('[/INST]', '').replace('<s>', '').replace('</s>', '')
                return ai_text.strip()
        elif response.status_code == 503:
            # –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
            return "ü§ñ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥!"
        else:
            logger.warning(f"HF API: {response.status_code}")
        
        # Fallback –æ—Ç–≤–µ—Ç
        return "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ DeepSeek. –†–∞–¥ –æ–±—â–µ–Ω–∏—é! üòä"
            
    except Exception as e:
        logger.error(f"AI error: {e}")
        return "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø AI –ø–æ–º–æ—â–Ω–∏–∫. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"

@app.post("/chat")
async def chat_endpoint(request: ChatRequest):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        ai_response = await get_ai_response(request.message, request.history)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        new_history = request.history + [
            {"role": "user", "content": request.message},
            {"role": "assistant", "content": ai_response}
        ]
        
        return ChatResponse(
            response=ai_response,
            history=new_history[-6:]  # –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–æ–æ–±—â–µ–Ω–∏–π
        )
        
    except Exception as e:
        logger.error(f"Chat error: {e}")
        return ChatResponse(
            response="–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ DeepSeek. –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã!",
            history=request.history
        )

@app.get("/")
async def root():
    return {"status": "active", "ai_provider": "Hugging Face", "model": "DeepSeek-R1"}

@app.get("/health")
async def health_check():
    return {"status": "healthy", "service": "AI Assistant Pro"}

@app.get("/test")
async def test_ai():
    """–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ AI"""
    try:
        test_response = await get_ai_response("–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?", [])
        return {"test": "OK", "ai_response": test_response}
    except Exception as e:
        return {"test": "ERROR", "error": str(e)}

# –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
